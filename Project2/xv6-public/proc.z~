#include "types.h"
#include "defs.h"
#include "param.h"
#include "memlayout.h"
#include "mmu.h"
#include "x86.h"
#include "proc.h"
#include "spinlock.h"


struct {
  struct spinlock lock;
  struct proc proc[NPROC];
} ptable;

static struct proc *initproc;

int nextpid = 1;
extern void forkret(void);
extern void trapret(void);

static void wakeup1(void *chan);


struct Queue
{
    struct proc *head; // Q linked list에서 head에 해당하는 프로세스
    struct proc *tail; // 추가되면 증가
    int time_quantum;
    int level; //0,1,2,3
    struct spinlock queueLock;
};

void monopolize_scheduler(void);
void initializing_Queue(void);
void pushQueue(struct Queue *queue, struct proc *process);
void popQueue(struct Queue *queue, struct proc *process);
void moveQueue(struct Queue *Queue, struct proc *process);
int getlev(void);
int setpriority(int pid, int priority);
void priority_boosting(void);
int setmonopoly(int pid, int password);
void monopolize(void);
void unmonopolize(void);

struct Queue L[4]; //L0 ~ L3
struct Queue MoQ;

void printQueue(struct proc* process, struct Queue Q)
{
  cprintf("running L[%d]\n", Q.level);
  cprintf("Queue head proc: %d\n", Q.head->pid);
  cprintf("**process pid: %d**\n", process->pid);
  cprintf("time quantum: %d\n", process->current_tick);
  cprintf("\n");
}
  
void
pinit(void)
{
  initlock(&ptable.lock, "ptable");
}

// Must be called with interrupts disabled
int
cpuid() {
  return mycpu()-cpus;
}

// Must be called with interrupts disabled to avoid the caller being
// rescheduled between reading lapicid and running through the loop.
struct cpu*
mycpu(void)
{
  int apicid, i;
  
  if(readeflags()&FL_IF)
    panic("mycpu called with interrupts enabled\n");
  
  apicid = lapicid();
  // APIC IDs are not guaranteed to be contiguous. Maybe we should have
  // a reverse map, or reserve a register to store &cpus[i].
  for (i = 0; i < ncpu; ++i) {
    if (cpus[i].apicid == apicid)
      return &cpus[i];
  }
  panic("unknown apicid\n");
}

// Disable interrupts so that we are not rescheduled
// while reading proc from the cpu structure
struct proc*
myproc(void) {
  struct cpu *c;
  struct proc *p;
  pushcli();
  c = mycpu();
  p = c->proc;
  popcli();
  return p;
}

//PAGEBREAK: 32
// Look in the process table for an UNUSED proc.
// If found, change state to EMBRYO and initialize
// state required to run in the kernel.
// Otherwise return 0.
static struct proc*
allocproc(void)
{
  struct proc *p;
  char *sp;

  acquire(&ptable.lock);

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
    if(p->state == UNUSED)
      goto found;

  release(&ptable.lock);
  return 0;

found:
  p->state = EMBRYO;
  p->pid = nextpid++;
  p->current_tick = 0;
  p->next = 0;

  p->queue_level = -1;
  p->priority = 0;

  //pushQueue(&L[0], p);

  release(&ptable.lock);

  // Allocate kernel stack.
  if((p->kstack = kalloc()) == 0){
    p->state = UNUSED;
    return 0;
  }

  sp = p->kstack + KSTACKSIZE;

  // Leave room for trap frame.
  sp -= sizeof *p->tf;
  p->tf = (struct trapframe*)sp;

  // Set up new context to start executing at forkret,
  // which returns to trapret.
  sp -= 4;
  *(uint*)sp = (uint)trapret;

  sp -= sizeof *p->context;
  p->context = (struct context*)sp;
  memset(p->context, 0, sizeof *p->context);
  p->context->eip = (uint)forkret;
  
  //p->state = RUNNABLE;
  //pushQueue(&L[0], p);

  return p;
}


//PAGEBREAK: 32
// Set up first user process.
void
userinit(void)
{
  struct proc *p;
  extern char _binary_initcode_start[], _binary_initcode_size[];

  p = allocproc();
  
  initproc = p;
  if((p->pgdir = setupkvm()) == 0)
    panic("userinit: out of memory?");
  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
  p->sz = PGSIZE;
  memset(p->tf, 0, sizeof(*p->tf));
  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
  p->tf->es = p->tf->ds;
  p->tf->ss = p->tf->ds;
  p->tf->eflags = FL_IF;
  p->tf->esp = PGSIZE;
  p->tf->eip = 0;  // beginning of initcode.S

  safestrcpy(p->name, "initcode", sizeof(p->name));
  p->cwd = namei("/");

  // this assignment to p->state lets other cores
  // run this process. the acquire forces the above
  // writes to be visible, and the lock is also needed
  // because the assignment might not be atomic.
  acquire(&ptable.lock);

  p->state = RUNNABLE;
  pushQueue(&L[0], p);
  release(&ptable.lock);
}

// Grow current process's memory by n bytes.
// Return 0 on success, -1 on failure.
int
growproc(int n)
{
  uint sz;
  struct proc *curproc = myproc();

  sz = curproc->sz;
  if(n > 0){
    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
      return -1;
  } else if(n < 0){
    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
      return -1;
  }
  curproc->sz = sz;
  switchuvm(curproc);
  return 0;
}

// Create a new process copying p as the parent.
// Sets up stack to return as if from system call.
// Caller must set state of returned proc to RUNNABLE.
int
fork(void)
{
  int i, pid;
  struct proc *np;
  struct proc *curproc = myproc();

  // Allocate process.
  if((np = allocproc()) == 0){
    return -1;
  }

  // Copy process state from proc.
  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
    kfree(np->kstack);
    np->kstack = 0;
    np->state = UNUSED;
    return -1;
  }
  np->sz = curproc->sz;
  np->parent = curproc;
  *np->tf = *curproc->tf;

  // Clear %eax so that fork returns 0 in the child.
  np->tf->eax = 0;

  for(i = 0; i < NOFILE; i++)
    if(curproc->ofile[i])
      np->ofile[i] = filedup(curproc->ofile[i]);
  np->cwd = idup(curproc->cwd);

  safestrcpy(np->name, curproc->name, sizeof(curproc->name));

  pid = np->pid;
  acquire(&ptable.lock);
  
  np->state = RUNNABLE;
  pushQueue(&L[0], np);
  release(&ptable.lock);

  return pid;
}

// Exit the current process.  Does not return.
// An exited process remains in the zombie state
// until its parent calls wait() to find out it exited.
void
exit(void)
{
  struct proc *curproc = myproc();
  struct proc *p;
  int fd;

  if(curproc == initproc)
    panic("init exiting");

  // Close all open files.
  for(fd = 0; fd < NOFILE; fd++){
    if(curproc->ofile[fd]){
      fileclose(curproc->ofile[fd]);
      curproc->ofile[fd] = 0;
    }
  }

  begin_op();
  iput(curproc->cwd);
  end_op();
  curproc->cwd = 0;

  acquire(&ptable.lock);

  // Parent might be sleeping in wait().
  wakeup1(curproc->parent);

  // Pass abandoned children to init.
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
    if(p->parent == curproc){
      p->parent = initproc;
      if(p->state == ZOMBIE)
        wakeup1(initproc);
    }
  }

  // Jump into the scheduler, never to return.
  curproc->state = ZOMBIE;
  sched();
  panic("zombie exit");
}

// Wait for a child process to exit and return its pid.
// Return -1 if this process has no children.
int
wait(void)
{
  struct proc *p;
  int havekids, pid;
  struct proc *curproc = myproc();

  acquire(&ptable.lock);
  for(;;){
    // Scan through table looking for exited children.
    havekids = 0;
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
      if(p->parent != curproc)
        continue;
      havekids = 1;
      if(p->state == ZOMBIE){
        // Found one.
        pid = p->pid;
        kfree(p->kstack);
        p->kstack = 0;
        freevm(p->pgdir);
        p->pid = 0;
        p->parent = 0;
        p->name[0] = 0;
        p->killed = 0;
        p->state = UNUSED;
        release(&ptable.lock);
        return pid;
      }
    }

    // No point waiting if we don't have any children.
    if(!havekids || curproc->killed){
      release(&ptable.lock);
      return -1;
    }

    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
  }
}

/*
//PAGEBREAK: 42
// Per-CPU process scheduler.
// Each CPU calls scheduler() after setting itself up.
// Scheduler never returns.  It loops, doing:
//  - choose a process to run
//  - swtch to start running that process
//  - eventually that process transfers control
//      via swtch back to the scheduler.
void
scheduler(void)
{
  cprintf("scheduler called!");
  struct proc *p;
  struct cpu *c = mycpu();
  c->proc = 0;
  //global_tick = 0; 
 
  for(;;){
    // Enable interrupts on this processor.
    sti();

    // Loop over process table looking for process to run.
    acquire(&ptable.lock);
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
      if(p->state != RUNNABLE)
        continue;

      // Switch to chosen process.  It is the process's job
      // to release ptable.lock and then reacquire it
      // before jumping back to us.
      c->proc = p;
      switchuvm(p);
      p->state = RUNNING;

      swtch(&(c->scheduler), p->context);
      switchkvm();

      // Process is done running for now.
      // It should have changed its p->state before coming back.
      c->proc = 0;
    }
    release(&ptable.lock);

  }
}
*/

// check if monopolize system call is called.
int is_monopolize_called = 0;


void scheduler(void)
{
    struct proc *p;
    struct cpu *c = mycpu();
    c->proc = 0;
    initializing_Queue();

    for (;;)
    {
      	//cprintf("for");
	sti();
        acquire(&ptable.lock);

        for (int i = 0; i < 3; i++) // L[0], L[1], L[2]
        {
            if (L[i].head != 0)
            {
                for (p = L[i].head; p != 0; p = p->next)
                {
                    if (p->state != RUNNABLE){ // L[i]의 다음 프로세스로
                        continue;}
		    //printQueue(p, L[i]);
                    c->proc = p;
                    switchuvm(p);
                    p->state = RUNNING;
                    p->current_tick++;
                    swtch(&(c->scheduler), p->context);
                    switchkvm();
                    c->proc = 0;

                    if (p->state == ZOMBIE)
                        popQueue(&L[i], p); //cprintf("the end\n");}

                    else if (p->current_tick >= L[i].time_quantum)
                    {
			p->current_tick = 0;
                        //popQueue(&L[i], p);
                        if (i == 0)
                        {
			    popQueue(&L[0], p);
                            if (p->pid % 2 == 0)
                                pushQueue(&L[2], p);
                            else if (p->pid % 2 == 1)
                                pushQueue(&L[1], p);
                        }
                        else if(i == 1 || i == 2){
                            popQueue(&L[i], p);
			    pushQueue(&L[3], p);
			}
			/*else if(p->queue_level == 2){
			    popQueue(&L[p->queue_level], p);
			    pushQueue(&L[3], p);
			}*/    
                    }
		    //else { popQueue(&L[i], p); pushQueue(&L[i], p);}
                    
                }
            }
        }
        if (L[1].head == 0 && L[2].head == 0 && L[3].head != 0)
        {
	    p = L[3].head;
	    
            //finding highest priority in L[3]
            struct proc *highest_proc = L[3].head;
	    int highest_priority = L[3].head->priority;
            struct proc *tmp = L[3].head;
	    for (tmp = L[3].head; tmp != 0; tmp = tmp->next)
            {
		if(tmp->state != RUNNABLE || tmp == 0) continue;
                if (tmp->priority > highest_priority)
                {
                    highest_proc = tmp;
                    highest_priority = tmp->priority;
                }
            }
            
            p = highest_proc;
	    /*if(p == 0){
		release(&ptable.lock);
		continue;
	    }*/
	    //printQueue(p, L[3]);
            c->proc = p;
            switchuvm(p);
            p->state = RUNNING;
            p->current_tick++;
            swtch(&(c->scheduler), p->context);
            switchkvm();
            c->proc = 0;

            if (p->state == ZOMBIE)
                popQueue(&L[3], p);
            else if (p->current_tick >= L[3].time_quantum)
            {
                p->current_tick = 0;
                if (p->priority > 0)
                    p->priority--; 
		    
            }
            
        }

    
        release(&ptable.lock);

    } // for(;;) end
}

/*
//monopoly Queue scheduler
void monopolize_scheduler(void)
{
    struct proc *p;
    struct cpu *c = mycpu();
    c->proc = 0;

    for (;;)
    {
        // Enable interrupts on this processor.
        sti();

        if (!is_monopolize_called) // if unmonopolized system call is called
        {
            return;
        }

        // Loop over process table looking for process to run.
        acquire(&ptable.lock);
        p = MoQ.head;
        if (p->state != RUNNABLE)
            continue;

        c->proc = p;  // 현재 cpu의 실행중인 프로세스를 p로 설정
        switchuvm(p); // 선택된 프로세스의 가상 메모리를 커널 가상 메모리로 전환
        p->state = RUNNING;

        // 현재 cpu의 실행 context를 선택된 프로세스의 context로 전환한다.
        swtch(&(c->scheduler), p->context);
        switchkvm(); // 커널 가상 메모리에서 사용자 모드로 전환한다.

        // Process is done running for now.
        // It should have changed its p->state before coming back.
        c->proc = 0;
        popQueue(&MoQ, p);

        is_monopolize_called = 0;
        global_tick = 0;
        release(&ptable.lock);
    }
}
*/


// Enter scheduler.  Must hold only ptable.lock
// and have changed proc->state. Saves and restores
// intena because intena is a property of this
// kernel thread, not this CPU. It should
// be proc->intena and proc->ncli, but that would
// break in the few places where a lock is held but
// there's no process.
void
sched(void)
{
  int intena;
  struct proc *p = myproc();

  if(!holding(&ptable.lock))
    panic("sched ptable.lock");
  if(mycpu()->ncli != 1)
    panic("sched locks");
  if(p->state == RUNNING)
    panic("sched running");
  if(readeflags()&FL_IF)
    panic("sched interruptible");
  intena = mycpu()->intena;
  swtch(&p->context, mycpu()->scheduler);
  mycpu()->intena = intena;
}

// Give up the CPU for one scheduling round.
void
yield(void)
{
  acquire(&ptable.lock);  //DOC: yieldlock
  myproc()->state = RUNNABLE;
  sched();
  release(&ptable.lock);
}
  

// A fork child's very first scheduling by scheduler()
// will swtch here.  "Return" to user space.
void
forkret(void)
{
  static int first = 1;
  // Still holding ptable.lock from scheduler.
  release(&ptable.lock);

  if (first) {
    // Some initialization functions must be run in the context
    // of a regular process (e.g., they call sleep), and thus cannot
    // be run from main().
    first = 0;
    iinit(ROOTDEV);
    initlog(ROOTDEV);
  }

  // Return to "caller", actually trapret (see allocproc).
}

// Atomically release lock and sleep on chan.
// Reacquires lock when awakened.
void
sleep(void *chan, struct spinlock *lk)
{
  struct proc *p = myproc();
  
  if(p == 0)
    panic("sleep");

  if(lk == 0)
    panic("sleep without lk");

  // Must acquire ptable.lock in order to
  // change p->state and then call sched.
  // Once we hold ptable.lock, we can be
  // guaranteed that we won't miss any wakeup
  // (wakeup runs with ptable.lock locked),
  // so it's okay to release lk.
  if(lk != &ptable.lock){  //DOC: sleeplock0
    acquire(&ptable.lock);  //DOC: sleeplock1
    release(lk);
  }
  // Go to sleep.
  p->chan = chan;
  p->state = SLEEPING;

  sched();

  // Tidy up.
  p->chan = 0;

  // Reacquire original lock.
  if(lk != &ptable.lock){  //DOC: sleeplock2
    release(&ptable.lock);
    acquire(lk);
  }
}

//PAGEBREAK!
// Wake up all processes sleeping on chan.
// The ptable lock must be held.
static void
wakeup1(void *chan)
{
  struct proc *p;

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
    if(p->state == SLEEPING && p->chan == chan)
      p->state = RUNNABLE;
}

// Wake up all processes sleeping on chan.
void
wakeup(void *chan)
{
  acquire(&ptable.lock);
  wakeup1(chan);
  release(&ptable.lock);
}

// Kill the process with the given pid.
// Process won't exit until it returns
// to user space (see trap in trap.c).
int
kill(int pid)
{
  struct proc *p;

  acquire(&ptable.lock);
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
    if(p->pid == pid){
      p->killed = 1;
      // Wake process from sleep if necessary.
      if(p->state == SLEEPING)
        p->state = RUNNABLE;
      release(&ptable.lock);
      return 0;
    }
  }
  release(&ptable.lock);
  return -1;
}

//PAGEBREAK: 36
// Print a process listing to console.  For debugging.
// Runs when user types ^P on console.
// No lock to avoid wedging a stuck machine further.
void
procdump(void)
{
  static char *states[] = {
  [UNUSED]    "unused",
  [EMBRYO]    "embryo",
  [SLEEPING]  "sleep ",
  [RUNNABLE]  "runble",
  [RUNNING]   "run   ",
  [ZOMBIE]    "zombie"
  };
  int i;
  struct proc *p;
  char *state;
  uint pc[10];

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
    if(p->state == UNUSED)
      continue;
    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
      state = states[p->state];
    else
      state = "???";
    cprintf("%d %s %s", p->pid, state, p->name);
    if(p->state == SLEEPING){
      getcallerpcs((uint*)p->context->ebp+2, pc);
      for(i=0; i<10 && pc[i] != 0; i++)
        cprintf(" %p", pc[i]);
    }
    cprintf("\n");
  }
}




void initializing_Queue(void)
{
    for(int i=0; i<4; i++)
    {
       L[i].level = i;
       L[i].time_quantum = 2*i+2;
       //L[i].head = 0; L[i].tail = 0;
    }
   
    MoQ.level = 4;
    //MoQ.time_quantum = 100;
    //MoQ.head = MoQ.tail = 0;
}

// 특정 큐에 새로운 프로세스를 넣어주는 함수
void pushQueue(struct Queue *queue, struct proc *process)
{
    if(process->queue_level != -1) return;   
 

    // Queue level의 오류
    if (queue->level < 0 || queue->level > 4)
    {
        cprintf("level exceed");
	return;
    }
    acquire(&queue->queueLock);
    process->next = 0;
    if (queue->head == 0) // when queue is empty!
    {
        queue->head = process;
        queue->tail = process;
    }
    else // when queue is not empty, push process in tail..
    {
        queue->tail->next = process;
        queue->tail = process;
    }
    process->queue_level = queue->level;
    process->state = RUNNABLE;
    //process->priority = 0;
    release(&queue->queueLock);
    
}

// 특정 큐에 프로세스를 빼주는 함수
void popQueue(struct Queue *queue, struct proc *process)
{
    if (queue->level < 0 || queue->level > 4 || process->queue_level != queue->level)
    {
        //cprintf("level error!\n");
        return;
    }
    if (queue->head == 0)
    {
        //cprintf("POP error: queue is empty\n");
        return;
    }
	
    //cprintf("pop!\n");
    acquire(&queue->queueLock);
    if (process == queue->head) // if proces is head of queue
    {
	queue->head = process->next;
        if (queue->head == 0)
        { // this queue is empty!
	    queue->tail = 0;
        }
	process->next = 0;
    }
    else // process is not head process.
    {
        struct proc *prev_proc = queue->head;
        while (prev_proc->next != process) // find previous process in queue
            prev_proc = prev_proc->next;
	
	prev_proc->next = process->next;
        if (queue->tail == process) // this case, process may be a tail.
            queue->tail = prev_proc;
        
	process->next = 0;
    }
    process->queue_level = -1;
    release(&queue->queueLock);
    //cprintf("pop success\n");
    
}



// 프로세스가 속한 큐의 레벨을 반환합니다.
// MoQ에 속한 프로세스인 경우 99를 반환합니다.
int getlev(void)
{
    if(myproc()->queue_level == 4) return 99;
    return myproc()->queue_level;
}



/*특정 pid를 가지는 프로세스의 priority를 설정합니다.
priority 설정에 성공한 경우 0을 반환합니다.
주어진 pid를 가진 프로세스가 존재하지 않는 경우 - 1을 반환합니다.
priority가 0 이상 10 이하의 정수가 아닌 경우 - 2를 반환합니다.*/
int setpriority(int pid, int priority)
{
    if (priority > 10 || priority < 0)
        return -2;

    struct proc *p;

    acquire(&ptable.lock);
    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
    {
        if (p->pid == pid)
        {
            p->priority = priority;
            release(&ptable.lock);
            return 0;
        }
    }

    release(&ptable.lock);
    return -1;
}



//priority boosting for starvation
void priority_boosting(void)
{
    struct proc *p;
    acquire(&ptable.lock);
    for(p = ptable.proc; p< &ptable.proc[NPROC]; p++){
	if(p->queue_level == 1 || p->queue_level == 2 || p->queue_level == 3){
	     popQueue(&L[p->queue_level], p);
	     pushQueue(&L[0], p);
	     p->current_tick = 0;
	}
    }
    release(&ptable.lock);

    //L[1].head = L[2].head = L[3].head = 0; 
}

// 특정 pid의 프로세스를 MoQ로 이동한다. 인자로 독점 자격을 증명할 암호(학번)
// 암호가 일치하면 MoQ의 크기 반환(MoQ 내부에 존재하는 종료되지 않은 프로세스의 개수)
// pid가 존재하지 않은 프로세스면 -1
// 암호가 일치하지 않으면 -2
int setmonopoly(int pid, int password)
{
    if (password != 2022054702)
        return -2;

    struct proc *p;
    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
    {
        if (p->pid == pid)
        {
            pushQueue(&MoQ, p);
            p->priority = 0;

            int MoQ_size = 0;
            for (struct proc *i = MoQ.head; i != 0; i = i->next)
            {
                if (i->state == RUNNABLE)
                    MoQ_size++;
            }
            return MoQ_size;
        }
    }

    return -1;
}



// MoQ의 프로세스가 cpu를 독점하여 사용하도록 설정한다.
void monopolize(void)
{
    is_monopolize_called = 1;
    scheduler();
}


//exit MoQ
void unmonopolize(void)
{
    // Disable interrupts to ensure atomicity.
    cli();

    acquire(&ptable.lock);

    is_monopolize_called = 0;

    release(&ptable.lock);

    sti();
}
